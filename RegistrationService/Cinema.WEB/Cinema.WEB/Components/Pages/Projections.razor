@page "/projections/{MovieId:guid}"
@rendermode InteractiveServer
@using Cinema.Common.Entities.MovieService
@inject NavigationManager Navigation
@inject Cinema.Common.HttpClients.MovieServiceHttpClient movieServiceClient
@inject Cinema.Common.HttpClients.CinemaServiceHttpClient cinemaServiceClient

<PageTitle>Projections</PageTitle>

<div class="container">
    <h2>@MovieTitle</h2>

    <div class="nav-bar">
        <button @onclick="PreviousDay" disabled="@IsPreviousDisabled">&larr;</button>
        <span><strong>@SelectedDate.ToString("dddd - dd.MM.yyyy")</strong></span>
        <button @onclick="NextDay" disabled="@IsNextDisabled">&rarr;</button>
    </div>

    <table>
        <thead>
            <tr>
                <th>SÁL</th>
                <th>Časy promítání</th>
            </tr>
        </thead>
        <tbody>
            @if (IsLoading)
            {
                <tr><td colspan="2">Načítání...</td></tr>
            }
            else
            {
                @foreach (var hallId in ProjectionsByHall)
                {
                    <tr>
                        <td>
                            @if (hallNames.TryGetValue(hallId.Key, out var hallName))
                            {
                                @hallName
                            }
                            else
                            {
                                <span style="color:red">Neznámý sál</span>
                            }
                        </td>
                        <td>
                            @foreach (var projection in ProjectionsByHall[hallId.Key])
                            {
                                <span class="time-button" @onclick="@(() => NavigateToProjection(projection.Id))">
                                    @projection.StartTime.ToString("HH:mm")
                                </span>
                            }
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public Guid MovieId { get; set; }

    private string MovieTitle = string.Empty;
    private DateOnly SelectedDate = DateOnly.FromDateTime(DateTime.Today);

    private Dictionary<Guid, List<ProjectionEntity>> ProjectionsByHall = new();
    private Dictionary<Guid, string> hallNames = new();
    private List<ProjectionEntity> AllProjections = new();

    private bool IsPreviousDisabled => SelectedDate <= DateOnly.FromDateTime(DateTime.Today);
    private bool IsNextDisabled => SelectedDate >= DateOnly.FromDateTime(DateTime.Today.AddDays(7));
    private bool IsLoading = false;


    protected override async Task OnInitializedAsync()
    {
        var movie = await movieServiceClient.GetMovieById(MovieId);
        MovieTitle = movie.Title;

        AllProjections = await movieServiceClient.GetAllProjectionsOfMovie(MovieId);

        FilterProjectionsForSelectedDate();
        await LoadHallNamesAsync();
    }

    private void FilterProjectionsForSelectedDate()
    {
        ProjectionsByHall = AllProjections
            .Where(p => DateOnly.FromDateTime(p.StartTime) == SelectedDate)
            .GroupBy(p => p.HallId)
            .ToDictionary(
                g => g.Key,
                g => g.OrderBy(p => p.StartTime).ToList()
            );
    }

    private async Task PreviousDay()
    {
        if (!IsPreviousDisabled)
        {
            IsLoading = true;
            SelectedDate = SelectedDate.AddDays(-1);
            FilterProjectionsForSelectedDate();
            await LoadHallNamesAsync();
            IsLoading = false;
        }
    }

    private async Task NextDay()
    {
        if (!IsNextDisabled)
        {
            SelectedDate = SelectedDate.AddDays(1);
            FilterProjectionsForSelectedDate();
            await LoadHallNamesAsync();
        }
    }

    private void NavigateToProjection(Guid projectionId)
    {
        Navigation.NavigateTo($"/seats/{projectionId}");
    }

    private async Task LoadHallNamesAsync()
    {
        hallNames.Clear();

        foreach (var item in ProjectionsByHall)
        {
            try
            {
                var hall = await cinemaServiceClient.GetHallByHallId(item.Key);
                if (!hallNames.ContainsKey(item.Key))
                    hallNames.Add(item.Key, hall.Name);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ERROR] Cannot get hall {item.Key}: {ex.Message}");
            }
        }
    }
}



<style>
    .container {
        text-align: center;
        margin-top: 30px;
    }

    .nav-bar {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-bottom: 20px;
    }

    button {
        padding: 5px 15px;
        font-size: 16px;
    }

    table {
        margin: 0 auto;
        border-collapse: collapse;
        width: 70%;
    }

    th, td {
        border: 2px solid black;
        padding: 12px;
        text-align: center;
    }

    th {
        background-color: #e0e0e0;
    }

    .time-button {
        margin: 5px;
        padding: 5px 10px;
        border: 1px solid black;
        background-color: #fff;
        cursor: pointer;
        display: inline-block;
    }

        .time-button:hover {
            background-color: #f0f0f0;
        }
</style>

